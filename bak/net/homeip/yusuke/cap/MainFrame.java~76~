package net.homeip.yusuke.cap;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import java.util.zip.ZipEntry;
import java.util.List;
import net.homeip.yusuke.common.I18nizedResources;
import net.homeip.yusuke.common.Configuration;
import net.homeip.yusuke.common.CustomizableKeyStroke;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.InvalidDnDOperationException;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

/**
 * <p>Title: Samurai</p>
 * <p>Description: a thread dump analyzing tool</p>
 * <p>Copyright: Copyright (c) 2003,2004</p>
 * <p> </p>
 * @author Yusuke Yamamoto
 * @version 1.0
 */

public class MainFrame extends JFrame {
  Configuration config = new Configuration("cap");
  I18nizedResources resources = I18nizedResources.getInstance();
  CustomizableKeyStroke keyStroke = new CustomizableKeyStroke(resources);
  JPanel contentPane;
  public AboutDialog aboutDialog = new AboutDialog(this);
  private Vector jarFiles = new Vector();
  public JMenuBar jMenuBar1 = new JMenuBar();
  public JMenu jMenuFile = new JMenu();
  public JMenuItem jMenuFileExit = new JMenuItem();
  public JMenu jMenuHelp = new JMenu();
  public JMenuItem jMenuHelpAbout = new JMenuItem();
  JLabel statusBar = new JLabel();
  BorderLayout borderLayout1 = new BorderLayout();
  JPanel jPanel1 = new JPanel();
  JSplitPane jSplitPane1 = new JSplitPane();
  BorderLayout borderLayout2 = new BorderLayout();
  JScrollPane jScrollPane1 = new JScrollPane();
  JarResolver jarResolver = new JarResolver();
  DefaultTreeModel treeModel = new DefaultTreeModel(jarResolver);
  JTree jTree = new JTree(treeModel);
  //Construct the frame
  public MainFrame() {
    enableEvents(AWTEvent.WINDOW_EVENT_MASK);
    try {
      jbInit();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  //Component initialization
  private void jbInit() throws Exception {
    contentPane = (JPanel)this.getContentPane();
    contentPane.setLayout(borderLayout1);
    this.setState(Frame.NORMAL);
    this.setTitle("*MainFrame.title*");
    statusBar.setText(" ");
    jMenuFile.setActionCommand("File");
    jMenuFile.setText("menu.file");
    jMenuFileExit.setText("menu.file.exit");
    jMenuFileExit.addActionListener(new Frame1_jMenuFileExit_ActionAdapter(this));
    jMenuHelp.setText("menu.help");
    jMenuHelpAbout.setSelected(false);
    jMenuHelpAbout.setText("menu.help.about");
    jMenuHelpAbout.addActionListener(new Frame1_jMenuHelpAbout_ActionAdapter(this));
    jPanel1.setLayout(borderLayout2);
    jSplitPane1.setContinuousLayout(true);
    jSplitPane1.setLastDividerLocation(150);
    resultText.setEditable(true);
    resultText.setText("*result*");
    jMenuFile.add(jMenuFileExit);
    jMenuHelp.add(jMenuHelpAbout);
    jMenuBar1.add(jMenuFile);
    jMenuBar1.add(jMenuHelp);
    this.setJMenuBar(jMenuBar1);
    contentPane.add(statusBar, BorderLayout.SOUTH);
    contentPane.add(jPanel1, BorderLayout.CENTER);
    jPanel1.add(jSplitPane1, BorderLayout.CENTER);
    jSplitPane1.add(jScrollPane1, JSplitPane.LEFT);
    jSplitPane1.add(jScrollPane2, JSplitPane.RIGHT);
    jScrollPane2.getViewport().add(resultText, null);
    jScrollPane1.getViewport().add(jTree, null);

    config.applyRectangle("MainFrame.bounds", this);
    jSplitPane1.setDividerLocation(150);
    DropTarget target = new DropTarget(jTree,
                                       DnDConstants.ACTION_REFERENCE,
                                       dropTargetListener
                                       );
    DropTarget target2 = new DropTarget(resultText,
                                        DnDConstants.ACTION_REFERENCE,
                                        dropTargetListener
                                        );
    resources.apply(this);
    keyStroke.apply(this);
    this.jTree.setRootVisible(false);
    jTree.setCellRenderer(new MyCellRenderer());
    jTree.expandPath(new javax.swing.tree.TreePath(jarResolver.getRoot()));

  }

  DropTargetListener dropTargetListener = new DropTargetListener() {
    public void dragEnter(DropTargetDragEvent enter) {
    }

    public void dragOver(DropTargetDragEvent over) {
    }

    public void dropActionChanged(DropTargetDragEvent action) {
    }

    public void dragExit(DropTargetEvent exit) {
    }

    public void drop(DropTargetDropEvent drop) {
      try {
        Transferable transfer = drop.getTransferable();
        if (transfer
            .isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
//dropped file(s)
          drop.acceptDrop(DnDConstants.ACTION_REFERENCE);
          List filelist = (List) transfer.getTransferData(DataFlavor.
            javaFileListFlavor);
          for (int i = 0; i < filelist.size(); i++) {
            jarResolver.add( (File) filelist.get(i));
//              jarList.setListData(jarFiles);
          }
          treeModel.reload();
          //test duplicates
          resultText.setText(jarResolver.getMessage());
          resultText.select(0, 0);
          drop.getDropTargetContext().dropComplete(true);
        }
      } catch (InvalidDnDOperationException ex) {
        ex.printStackTrace();
//        setTemporaryStatus(ex.toString());
      } catch (IOException ex) {
        ex.printStackTrace();
//        setTemporaryStatus(ex.toString());
      } catch (UnsupportedFlavorException ex) {
        ex.printStackTrace();
//        setTemporaryStatus(ex.toString());
      }
    }
  };
  JScrollPane jScrollPane2 = new JScrollPane();
  public JTextArea resultText = new JTextArea();

  //File | Exit action performed
  public void jMenuFileExit_actionPerformed(ActionEvent e) {
    System.exit(0);
  }

  //Help | About action performed
  public void jMenuHelpAbout_actionPerformed(ActionEvent e) {
    Dimension dlgSize = aboutDialog.getPreferredSize();
    Dimension frmSize = getSize();
    Point loc = getLocation();
    aboutDialog.setLocation( (frmSize.width - dlgSize.width) / 2 + loc.x,
                            (frmSize.height - dlgSize.height) / 2 + loc.y);
    aboutDialog.setModal(true);
    aboutDialog.pack();
    aboutDialog.show();
  }

  //Overridden so we can exit when window is closed
  protected void processWindowEvent(WindowEvent e) {
    super.processWindowEvent(e);
    if (e.getID() == WindowEvent.WINDOW_CLOSING) {
      jMenuFileExit_actionPerformed(null);
    }
  }

  class MyCellRenderer extends JLabel implements TreeCellRenderer {
      public MyCellRenderer(){
        setOpaque(true);
      }
      ImageIcon doc = new ImageIcon(MainFrame.class.getResource("doc.gif"));
      ImageIcon myPackage = new ImageIcon(MainFrame.class.getResource("package.gif"));
      ImageIcon myPackageopen = new ImageIcon(MainFrame.class.getResource("packageopen.gif"));
      Color selectedColor = new Color(0,0,150);

      public Component getTreeCellRendererComponent(JTree tree, Object value,
         boolean selected, boolean expanded, boolean leaf,
        int row, boolean hasFocus){

        /* 各項目で表示されるテキスト */
        setText(value.toString());
        JarResolver resolver = (JarResolver)value;
        System.out.println("hoge");

        if (selected){
          /* 背景色を青に設定 */
          if(resolver.isDuplicated()){
            setBackground(Color.RED);
          }else{
            setBackground(selectedColor);
          }
          /* 文字色を白に設定 */
          setForeground(Color.white);
        }else{
          /* 背景色を白に設定 */
          setBackground(Color.white);
          /* 文字色を黒に設定 */
          if(resolver.isDuplicated()){
            setForeground(Color.RED);
          }else{
            setForeground(Color.black);
          }
        }

        /* 項目が枝か葉か */
        if (leaf){
          /* 選択されているかどうか */
          if (selected){
            /* アイコンを追加して */
            setIcon(doc);
          }else{
            /* アイコンは無し */
            setIcon(doc);
          }
        }else{
          /* 展開されているかどうか */
          if (expanded){
            setIcon(myPackageopen);
          }else{
            setIcon(myPackage);
          }
        }

        return this;
      }
    }

}

class Frame1_jMenuFileExit_ActionAdapter implements ActionListener {
  MainFrame adaptee;

  Frame1_jMenuFileExit_ActionAdapter(MainFrame adaptee) {
    this.adaptee = adaptee;
  }

  public void actionPerformed(ActionEvent e) {
    adaptee.jMenuFileExit_actionPerformed(e);
  }
}

class Frame1_jMenuHelpAbout_ActionAdapter implements ActionListener {
  MainFrame adaptee;

  Frame1_jMenuHelpAbout_ActionAdapter(MainFrame adaptee) {
    this.adaptee = adaptee;
  }

  public void actionPerformed(ActionEvent e) {
    adaptee.jMenuHelpAbout_actionPerformed(e);
  }
}