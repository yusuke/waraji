package net.homeip.yusuke.cap;

import java.util.Enumeration;
import java.io.File;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.List;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import javax.swing.tree.DefaultMutableTreeNode;
import net.homeip.yusuke.common.I18nizedResources;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * <p>Title: Samurai</p>
 * <p>Description: a thread dump analyzing tool</p>
 * <p>Copyright: Copyright (c) 2003,2004</p>
 * <p> </p>
 * @author Yusuke Yamamoto
 * @version 1.0
 */

public class JarResolver extends DefaultMutableTreeNode {
  I18nizedResources resources = I18nizedResources.getInstance();
  Map childs = new HashMap();
  ZipEntry zipEntry;
  FileLocations locations;

  File file;
  static Map files = new HashMap();
  static List duplicates = new LinkedList();
  public JarResolver() {
    super("root node");
    this.zipEntry = null;
  }
  public JarResolver(File file) throws ZipException, IOException {
    super(file.getName());
    this.file = file;
    this.zipEntry = null;
    this.locations = null;
    if (!file.exists() || file.isDirectory()) {
      return;
    }
    ZipFile zipFile = new ZipFile(file);
    Enumeration e = zipFile.entries();
    while (e.hasMoreElements()) {
      ZipEntry entry = (ZipEntry) e.nextElement();
      FileLocations locations = null;
      if(!entry.isDirectory()){
        locations = (FileLocations)files.get(entry.toString());
        if(null == locations){
          files.put(entry.toString(),locations = new FileLocations(entry.toString(),file,entry));
        }else{
          locations.addFile(file,entry);
          if (!entry.toString().startsWith("META-INF/")) {
            duplicates.add(locations);
          }
        }
      }
      String name = entry.getName();
      add(entry,locations,name);
    }
    zipFile.close();
  }

  private JarResolver(ZipEntry zipEntry,FileLocations locations,String dir, String afterDir) {
    super(dir);
    this.file = null;
    add(zipEntry,locations,afterDir);
    System.out.println("isLeaf");
    if(this.isLeaf()){
      System.out.println("isLeaf");
      this.zipEntry = zipEntry;
      this.locations = locations;
    }else{
      System.out.println("isnotleaf");
      this.zipEntry = null;
      this.locations = null;
    }
  }

  public void add(File file) {
    try {
      add(new JarResolver(file));
    } catch (IOException ex) {
      add(new DefaultMutableTreeNode(file.getName()));
    }
  }

  public static FileLocations[] getDuplicatesArray(){
    return (FileLocations[]) duplicates.toArray(new FileLocations[0]);
  }


  private JarResolver(String name) {
    super(name);
    this.file = null;
    this.zipEntry = null;
  }

  boolean isDuplicated(){
    if(null != locations){
      System.out.println("name:"+this.zipEntry.getName());
      System.out.println("length:"+locations.getEntries().length);
      return locations.getEntries().length >1;
    }else{
    return false;
    }
  }

  private void add(ZipEntry zipEntry,FileLocations locations,String name) {
    int dirIndex;

    if ( -1 != (dirIndex = name.indexOf("/"))) {
      String dir = name.substring(0, dirIndex);
      String afterDir = name.substring(dirIndex + 1);
      JarResolver resolver = (JarResolver) childs.get(dir);
      if (null == resolver) {
        if ("".equals(afterDir)) {
          System.out.println("dir:"+dir);
          resolver = new JarResolver(dir);
        } else {
          resolver = new JarResolver(zipEntry,locations,dir, afterDir);
        }
        add(resolver);
        childs.put(dir, resolver);
      } else {
        if (!"".equals(afterDir)) {
          resolver.add(zipEntry,locations,afterDir);
        }
      }
    } else {
      JarResolver resolver = new JarResolver(name);
      add(resolver);
      childs.put(name, resolver);
    }
  }
  public String getMessage(){
    FileLocations[] locations = getDuplicatesArray();
    if (0 != locations.length) {
      SimpleDateFormat format = new SimpleDateFormat(resources.getMessage("dateFormat"));
      StringBuffer result = new StringBuffer(resources.getMessage("dupliicated"));
      for (int i = 0; i < locations.length; i++) {
        result.append(locations[i].getPath()).append(":\n");
        File[] files = locations[i].getFiles();
        ZipEntry[] entries = locations[i].getEntries();
        for (int j = 0; j < files.length; j++) {
          if (0 == j) {
            result.append(" in ");
          } else {
            result.append("\n    ");
          }
          result.append(files[j].getName())
            .append("(").append(entries[j].getSize()).append("bytes,")
            .append(format.format(new Date(entries[j].getTime()))).append(")");
        }
        result.append("\n");

      }
      return result.toString();
    }else{
      return resources.getMessage("NotDetected");
    }
  }

}
