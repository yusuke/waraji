package net.homeip.yusuke.common.samurai;
import java.io.Serializable;
import java.util.List;
import java.util.ArrayList;

public abstract class ThreadDump implements Serializable{
    private final List stackLines;
    private final String header;
    public ThreadDump(String header) {
        this.header = header;
        stackLines = new ArrayList();
    }

    public final String getHeader(){
      return this.header;
    }

    private String condition = null;
    protected final String getCondition(){
        if(null == this.condition){
          this.condition = this.header.substring(this.header.lastIndexOf("\""));
        }
        return this.condition;
    }

    protected final List getStackLines(){
      return this.stackLines;
    }
    public final int size() {
      return getStackLines().size();
    }

    /*package*/ void addStackLine(String stackLine){
      getStackLines().add(new StackLine(stackLine));
    }
    /**
     * returns the thread's name.
     * @return name
     */
    public final String getName() {
        //calculate thread name
        int headerBeginIndex = getHeader().indexOf("\"") + 1;
        int headerEndIndex = getHeader().indexOf("\"", 2);
        return  getHeader().substring(headerBeginIndex, headerEndIndex);
    }
    public final StackLine getLine(int i) {
      return (StackLine) getStackLines().get(i);
    }
    public abstract String getState();
    public abstract boolean isStacked();
    public abstract boolean isIdle();
    public abstract boolean isDaemon();
}