package net.homeip.yusuke.samurai.common;

import java.io.File;
import java.io.RandomAccessFile;
import java.io.IOException;

public class LogWatcher extends Thread {
  private LogMonitor[] logMonitors = null;
  private int logMonitorCount = 0;
  private boolean notDestroyed = true;
  private boolean debug = false;
  public LogWatcher() {
    super.setName("LogWatcher Thread");
  }

  public void setDebug(boolean debug) {
    this.debug = debug;
  }

  public void addLogMonitor(LogMonitor logMonitor) {
    if (null == logMonitors) {
      logMonitors = new LogMonitor[1];
      logMonitors[0] = logMonitor;
    } else {
      LogMonitor[] newLogMonitors = new LogMonitor[logMonitorCount + 1];
      System.arraycopy(logMonitors, 0, newLogMonitors, 0, logMonitorCount);
      newLogMonitors[logMonitorCount] = logMonitor;
      logMonitors = newLogMonitors;
    }
    logMonitorCount++;
  }

  public void destroy() {
    this.notDestroyed = false;
  }
int count = 0;
  public synchronized void setFile(File file) {
    this.newFile = file;
    this.newFilePointer = 0;
    count++;
  }
  private long newFilePointer = 0;
  private long filePointer = 0;
//  public synchronized void setFile(File file,long filePointer){
//    this.newFile = file;
//    this.newFilePointer= filePointer;
//  }

  private boolean hasEnded = false;
  private boolean hasStarted = false;
  private File file = null;
  private File newFile = null;
  public void run() {
    if (debug)
      log("analyze(" + file + ")");
    RandomAccessFile raf;
    String line;
    int waitCount = 0;
    boolean updateDetected = false;

    while (true) {
      try {
        if (null != file) {
          if (file.exists()) {
            raf = new RandomAccessFile(file, "r");
            raf.seek(filePointer);
            if (debug)
              log(waitCount);
            while (null != (line = raf.readLine()) && notDestroyed) {
              if (!hasStarted) {
                logStarted();
              }
              onLine(line);
            }
            filePointer = raf.getFilePointer();
            raf.close();
          }
        }

        updateDetected = false;
        do {
          if (null != file) {
            if (file.exists()) {
              if (file.length() == filePointer) {
                if (hasStarted && !hasEnded) {
                  if (20 == waitCount++) {
                    if (debug) {
                      log("no new line detected for 1 second");
                    }
                    logEnded();
                    waitCount = 0;
                  }
                }
              } else {
                updateDetected = true;
                if (file.length() > filePointer) {
                  logContinued();
                } else {
                  if (!hasEnded) {
                    logEnded();
                  }
                  filePointer = 0;
                  logStarted();
                }
              }
            } else {
              filePointer = 0;
            }
          }
          if(null != newFile){
            file = newFile;
            filePointer = 0;
            if(hasStarted && !hasEnded){
              logEnded();
            }
            newFile = null;
            newFilePointer = 0;
            updateDetected = true;
            hasStarted = false;
            hasEnded = false;
          }else if(!updateDetected){
            if(1 == waitCount){
              sleeping();
            }
            try {
              Thread.sleep(100);
            } catch (InterruptedException ie) {
            }
          }
        } while (!updateDetected && notDestroyed);
      } catch (IOException ex) {
        onException(ex);
      }
    }
  }

  private int i;
  private void onLine(String line) {
//    if (debug) {
//      log("onLine:" + line);
//    }
    for (i = 0; i < logMonitorCount; i++) {
      logMonitors[i].onLine(line);
    }
  }

  private void logStarted() {
    hasStarted = true;
    hasEnded = false;
    if (debug)
      log("logStarted()");
    for (i = 0; i < logMonitorCount; i++) {
      logMonitors[i].logStarted();
    }
  }

  private void logEnded() {
    hasEnded = true;
    if (debug)
      log("logEnded()");
    for (i = 0; i < logMonitorCount; i++) {
      logMonitors[i].logEnded();
    }
  }

  private void logContinued() {
    hasEnded = false;
    if (debug)
      log("logContinued()");
    for (i = 0; i < logMonitorCount; i++) {
      logMonitors[i].logContinued();
    }
  }

  private void onException(IOException ioe) {
    if (debug)
      log("onException()");
    for (i = 0; i < logMonitorCount; i++) {
      logMonitors[i].onException(ioe);
    }
  }


  private void sleeping(){
    if(!hasEnded && hasStarted){
      for (i = 0; i < logMonitorCount; i++) {
        logMonitors[i].logWillEnd();
      }
    }
  }

  private void log(int msg) {
    log(String.valueOf(msg));
  }
  private void log(String msg) {
    System.out.println("logWatcher:" + msg);
  }

}