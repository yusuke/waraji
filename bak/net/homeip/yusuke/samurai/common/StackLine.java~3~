package net.homeip.yusuke.common.samurai;

import java.util.List;
import java.io.Serializable;

public class StackLine implements Serializable{
  private String line;
  private List stateList;
  public StackLine(String line) {
    this.line = line;
  }

  public boolean isLine(){
    return getLine().startsWith("\tat") || getLine().startsWith("    at");
  }
  public boolean isCondition(){
    return getLine().startsWith("\t-");
  }

  public String getClassName() {
      if (isLine()) {
          int classIndexBegin = line.indexOf("at ") + 3;
          int classIndexEnd = line.lastIndexOf(".", line.indexOf("("));
          return line.substring(classIndexBegin, classIndexEnd);
      } else {
          return "n/a";
      }
  }

  public String getMethodName() {
      if (isLine()) {
          int methodIndexBegin = line.lastIndexOf(".", line.indexOf("(")) + 1;
          int methodIndexEnd = line.indexOf("(");
          return line.substring(methodIndexBegin, methodIndexEnd);
      } else {
          return "n/a";
      }
  }

  public String getSource() {
      if (isLine()) {
          if (isNativeMethod()) {
              return "Native Method";
          } else {
              int sourceIndexBegin = line.indexOf("(") + 1;
              int sourceIndexEnd = line.indexOf(":");
              if(-1 != sourceIndexEnd){
                  return line.substring(sourceIndexBegin, sourceIndexEnd);
              }else{
                return "Unknown Source";
              }
          }
      } else {
          return "n/a";
      }
  }

  public String getLine(){
    return this.line;
  }

  public String getLineNumber() {
    if (isNativeMethod()) {
      return "Native Method";
    } else {
      int lineIndexBegin = line.indexOf(":") + 1;
      int lineIndexEnd = line.indexOf(")");
      if(0 != lineIndexBegin){
          return line.substring(lineIndexBegin, lineIndexEnd);
      }else{
        return "Unknown Source";
      }
    }
  }

  public boolean isNativeMethod() {
    return -1 != line.indexOf("Native Method");
  }

  public String toString() {
      return line;
  }
}