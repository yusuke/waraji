package net.homeip.yusuke.samurai.common;

import java.util.Properties;
import java.io.File;
import java.io.IOException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.awt.Rectangle;
import java.awt.Point;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.Dimension;
import java.lang.reflect.Field;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
/**
 * application's configuration
 * <p>Title: Samurai</p>
 * <p>Description: a thread dump analyzing tool</p>
 * <p>Copyright: Copyright (c) 2003,2004</p>
 * <p> </p>
 * @author Yusuke Yamamoto
 * @version 1.0
 */
public final class Configuration{
    private Properties props;
    private String fileName;
    private String name;
    public Configuration(String name){
        this.name = name;
        this.fileName = System.getProperty("user.home") + File.separator + "." +
                        name + ".properties";
        I18nizedResources resources = new I18nizedResources("default",
                                      getCallerPackage());
        props = resources.getProperties();
        try{
            FileInputStream fis = new FileInputStream(fileName);
            props.load(fis);
        } catch(IOException ioe){
        //
        }

    }

    private static String getCallerPackage(){
        String callerClass = new Throwable().getStackTrace()[2].getClassName();
        return callerClass.substring(0,
            callerClass.lastIndexOf(".")).replaceAll("\\.",
            "/");
    }

    public int getInt(String key){
        String theValue = props.getProperty(key);
        int returnValue;
        try{
            returnValue = Integer.parseInt(theValue);
        } catch(NumberFormatException nfe){
            returnValue = -1;
        }
        return returnValue;
    }

    public void setInt(String key,int value){
        props.setProperty(key,String.valueOf(value));
    }

    public String getString(String key){
        String theValue = props.getProperty(key);
        String returnValue;
        if(null == theValue){
            returnValue = "";
        } else{
            returnValue = theValue;
        }
        return returnValue;
    }

    public void setString(String key,String value){
        props.setProperty(key,String.valueOf(value));
    }

    public boolean getBoolean(String key){
        String theValue = props.getProperty(key);
        boolean returnValue;
        if(null == theValue){
            returnValue = false;
        } else{
            returnValue = theValue.equalsIgnoreCase("true");
        }
        return returnValue;
    }

    public void setBoolean(String key,boolean value){
        props.setProperty(key,String.valueOf(value));
    }

    public Rectangle getRectangle(String key){
        String theValue = props.getProperty(key);
        Rectangle returnValue;
        if(null == theValue){
            returnValue = null;
        } else{
            String[] splitted = theValue.split(",");
            double x = Double.parseDouble(splitted[0]);
            double y = Double.parseDouble(splitted[1]);
            double width = Double.parseDouble(splitted[2]);
            double height = Double.parseDouble(splitted[3]);
            returnValue = new Rectangle((int)x,(int)y,(int)width,(int)height);
        }
        return returnValue;
    }

    public Point getLocation(String key){
        String theValue = props.getProperty(key);
        Point returnValue;
        if(null == theValue){
            returnValue = null;
        } else{
            String[] splitted = theValue.split(",");
            double x = Double.parseDouble(splitted[0]);
            double y = Double.parseDouble(splitted[1]);
            returnValue = new Point((int)x,(int)y);
        }
        return returnValue;
    }

    public void setLocation(String key,Point point){
        props.setProperty(key,point.getX() + "," + point.getY());

    }

    private void centerComponent(Component component){
        Dimension frameSize = component.getSize();
        Point frameLocation = component.getLocation();
        if(10000 < frameLocation.getX() && 10000 < frameLocation.getY()){
          //Center the window
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            if(frameSize.height > screenSize.height){
                frameSize.height = screenSize.height;
            }
            if(frameSize.width > screenSize.width){
                frameSize.width = screenSize.width;
            }
            component.setLocation((screenSize.width - frameSize.width) / 2,
                (screenSize.height - frameSize.height) / 2);
            System.out.println(component.getLocation());
        }
    }

    public void setRectangle(String key,Rectangle value){
        props.setProperty(key,
            value.getX() + "," + value.getY() + "," + value.getWidth() + "," +
            value.getHeight());
    }

    public void applyRectangle(String key,Component component){
        component.setBounds(getRectangle(key));
        setRectangle(key,component.getBounds());
        centerComponent(component);
        setRectangle(key,component.getBounds());
    }

    public void applyLocation(String key,Component component){
        component.setLocation(getLocation(key));
        setLocation(key,component.getLocation());
        centerComponent(component);
        setLocation(key,component.getLocation());
    }

    public void storeRectangle(String key,Component component){
        setRectangle(key,component.getBounds());
    }

    public void storeLocation(String key,Component component){
        setLocation(key,component.getLocation());
    }

    public void save() throws IOException{
        props.store(new FileOutputStream(this.fileName),this.name);
    }

    public void apply(Object obj){
        java.lang.reflect.Field[] fields = obj.getClass().getDeclaredFields();
        for(int i = 0;i < fields.length;i++){
            String fieldName = fields[i].getName();
            if(fieldName.startsWith("config_")){
                String property = fieldName.substring(7);
                Class type = fields[i].getType();
                try{
                    if(type.equals(boolean.class)){
                        fields[i].setBoolean(obj,getBoolean(property));
                    } else if(type.equals(int.class)){
                        fields[i].setInt(obj,getInt(property));
                    } else if(type.equals(java.lang.String.class)){
                        fields[i].set(obj,getString(property));
                    } else if(type.equals(javax.swing.JCheckBox.class)){
                        ((JCheckBox)fields[i].get(obj)).setSelected(getBoolean(
                            property));
                    } else if(type.equals(javax.swing.JComboBox.class)){
                        JComboBox comboBox = (JComboBox)fields[i].get(obj);
                        comboBox.setSelectedItem(getString(property));
                    }
                } catch(IllegalAccessException iae){
                    throw new AssertionError(iae.getMessage());
                }
            }
        }
        if(obj instanceof ConfigurationListener){
          ((ConfigurationListener)obj).onConfigurationChanged(this);
        }

    }

    public void store(Object obj){
        java.lang.reflect.Field[] fields = obj.getClass().getDeclaredFields();
        for(int i = 0;i < fields.length;i++){
            String fieldName = fields[i].getName();
            if(fieldName.startsWith("config_")){
                String property = fieldName.substring(7);
                Class type = fields[i].getType();
                try{
                    if(type.equals(boolean.class)){
                        setBoolean(property,fields[i].getBoolean(obj));
                    } else if(type.equals(int.class)){
                        setInt(property,fields[i].getInt(obj));
                    } else if(type.equals(java.lang.String.class)){
                        setString(property,(String)fields[i].get(obj));
                    } else if(type.equals(javax.swing.JCheckBox.class)){
                        setBoolean(property,
                            ((JCheckBox)fields[i].get(obj)).isSelected());
                    } else if(type.equals(javax.swing.JComboBox.class)){
                        setString(property,(String)((JComboBox)fields[i].get(obj)).getSelectedItem());
                    }
                } catch(IllegalAccessException iae){
                    throw new AssertionError(iae.getMessage());
                }
            }
        }

    }

}