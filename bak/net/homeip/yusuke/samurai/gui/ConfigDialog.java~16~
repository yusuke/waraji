package net.homeip.yusuke.samurai.gui;

import java.awt.*;
import javax.swing.*;
import net.homeip.yusuke.samurai.common.I18nizedResources;
import java.awt.event.*;
import java.beans.*;
import javax.swing.event.*;

/**
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: </p>
 * @author not attributable
 * @version 1.0
 */

public class ConfigDialog extends JDialog{
    I18nizedResources resources = I18nizedResources.getInstance();
    public JButton okButton = new JButton();
    public JButton cancelButton = new JButton();
    MainFrame mainFrame = null;
    public JTabbedPane jTabbedPane1 = new JTabbedPane();

    GridBagLayout gridBagLayout1 = new GridBagLayout();

    JPanel logConfigPanel = new JPanel();
    GridBagLayout logConfigLayout = new GridBagLayout();
    public JLabel labelFontSize = new JLabel();
    public JLabel dumpFontSize = new JLabel();
    public JLabel logFontSample = new JLabel();
    public JCheckBox config_wrapLog = new JCheckBox();
    public JComboBox config_logFontFamily = new JComboBox();
    public JComboBox config_logFontSize = new JComboBox();

    JPanel dumpConfigPanel = new JPanel();
    public JLabel dumpFontSample = new JLabel();
    GridBagLayout dumpConfigLayout = new GridBagLayout();
    public JCheckBox config_wrapDump = new JCheckBox();
    public JComboBox config_dumpFontFamily = new JComboBox();
    public JComboBox config_dumpFontSize = new JComboBox();


    public JPanel searchConfigPanel = new JPanel();
    public JCheckBox config_useRegexp = new JCheckBox();
    public JCheckBox config_ignoreCase = new JCheckBox();
  public JLabel jLabel1 = new JLabel();
  GridBagLayout gridBagLayout2 = new GridBagLayout();
  JPanel jPanel1 = new JPanel();
  GridBagLayout gridBagLayout3 = new GridBagLayout();
  public JCheckBox config_shrinkIdleThreads = new JCheckBox();
  public JLabel labelFontFamily = new JLabel();

    public ConfigDialog(Frame frame,String title,boolean modal){
        super(frame,title,modal);
        try{
            jbInit();
            pack();
        } catch(Exception ex){
            ex.printStackTrace();
        }
    }

    /*package*/ void setMainFrame(MainFrame mainFrame){
        this.mainFrame = mainFrame;
    }

    public ConfigDialog(){
        this(null,"",false);
    }

    private void jbInit() throws Exception{
        //panel root
        this.getContentPane().setLayout(gridBagLayout1);
        config_wrapLog.setToolTipText("");
    config_wrapLog.setText("*ConfigDialog.wrapLine*");
    jLabel1.setText("*ConfigDialog.fontFamily*");
    jTabbedPane1.setTabPlacement(JTabbedPane.TOP);
    jPanel1.setLayout(gridBagLayout3);
    config_shrinkIdleThreads.setText("*ConfigDialog.shrinkIdleThreads*");
    labelFontFamily.setText("*ConfigDialog.fontFamily*");
    labelFontFamily.setRequestFocusEnabled(true);
    labelFontFamily.setText("*ConfigDialog.fontFamily*");
    this.getContentPane().add(okButton,new GridBagConstraints(1,1,1,1,1.0,
            0.0
            ,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,0,5,5),
            0,0));
        this.getContentPane().add(cancelButton,new GridBagConstraints(0,1,1,1,
            20.0,0.0
            ,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,0),
            0,0));
        this.getContentPane().add(jTabbedPane1,new GridBagConstraints(0,0,2,1,
            0.0,0.0
            ,GridBagConstraints.CENTER,GridBagConstraints.BOTH,new Insets(5,5,5,
            5),0,0));
        config_useRegexp.setText("*ConfigDialog.useRegexp*");
        this.setModal(true);
        this.setResizable(false);
        this.addWindowListener(new ConfigDialog_this_windowAdapter(this));
        okButton.setDefaultCapable(false);
        okButton.setActionCommand("okButton");
        okButton.setText("*ConfigDialog.ok*");
        okButton.addActionListener(new ConfigDialog_okButton_actionAdapter(this));
        cancelButton.setActionCommand("cancelButton");
        cancelButton.setSelected(true);
        cancelButton.setText("*ConfigDialog.cancel*");
        cancelButton.addActionListener(new
            ConfigDialog_cancelButton_actionAdapter(this));
        jTabbedPane1.setMinimumSize(new Dimension(330, 200));
        jTabbedPane1.setOpaque(false);
        jTabbedPane1.setPreferredSize(new Dimension(330, 200));
        config_ignoreCase.setText("*ConfigDialog.ignoreCase*");

        //dump panel
        config_wrapDump.setActionCommand("*ConfigDialog.wrapLine*");
        config_wrapDump.setSelected(false);
        config_wrapDump.setText("*ConfigDialog.wrapLine*");
        dumpConfigPanel.setLayout(dumpConfigLayout);
        dumpFontSize.setText("*ConfigDialog.fontSize*");
        dumpFontSample.setText("*ConfigDialog.fontSample*");

        config_dumpFontSize.setSelectedIndex( -1);
        config_dumpFontSize.addItemListener(new
            ConfigDialog_config_dumpFontSize_itemAdapter(this));
        dumpConfigPanel.setMinimumSize(new Dimension(100,100));
        dumpConfigPanel.setOpaque(true);
        dumpConfigPanel.setPreferredSize(new Dimension(100,100));
        dumpConfigPanel.setRequestFocusEnabled(true);
        config_dumpFontFamily.addItemListener(new
            ConfigDialog_config_dumpFontFamily_itemAdapter(this));
//        dumpConfigPanel.add(config_wrapDump, new GridBagConstraints(1, 0, 1, 1, 0.0, 0.0
//            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
        dumpConfigPanel.add(config_dumpFontFamily,     new GridBagConstraints(1, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    dumpConfigPanel.add(jLabel1,    new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    dumpConfigPanel.add(dumpFontSize,   new GridBagConstraints(0, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    dumpConfigPanel.add(config_dumpFontSize,    new GridBagConstraints(1, 2, 1, 1, 0.0, 0.0
            ,GridBagConstraints.WEST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    dumpConfigPanel.add(dumpFontSample,    new GridBagConstraints(0, 3, 2, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    dumpConfigPanel.add(config_shrinkIdleThreads,    new GridBagConstraints(1, 0, 2, 1, 0.0, 0.0
            ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
        String[] fonts = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
        for(int i = 0;i < fonts.length;i++){
            config_dumpFontFamily.addItem(fonts[i]);
        }
        String[] fontSizes = {"6","7","8","9","10","11","12","13","14","15",
                             "16","17","18","19","20"};
        for(int i = 0;i < fontSizes.length;i++){
            config_dumpFontSize.addItem(fontSizes[i]);
        }



        //log panel
        config_ignoreCase.setText("*ConfigDialog.ignoreCase*");



        logConfigPanel.setLayout(logConfigLayout);

        labelFontSize.setText("*ConfigDialog.fontSize*");

        logFontSample.setText("*ConfigDialog.fontSample*");
        config_logFontSize.setSelectedIndex( -1);
        config_logFontSize.addItemListener(new
            ConfigDialog_config_logFontSize_itemAdapter(this));
        logConfigPanel.setMinimumSize(new Dimension(100,100));
        logConfigPanel.setOpaque(true);
        logConfigPanel.setPreferredSize(new Dimension(100,100));
        logConfigPanel.setRequestFocusEnabled(true);
        config_logFontFamily.addItemListener(new
            ConfigDialog_config_logFontSize_itemAdapter(this));
        logConfigPanel.add(config_wrapLog,new GridBagConstraints(1,0,1,1,0.0,
            0.0
            ,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),
            0,0));

        logConfigPanel.add(config_logFontFamily,new GridBagConstraints(1,1,1,1,
            0.0,0.0
            ,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),
            0,0));
        logConfigPanel.add(labelFontSize,new GridBagConstraints(0,2,1,1,0.0,0.0
            ,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(0,0,5,0),
            0,0));
        logConfigPanel.add(config_logFontSize,new GridBagConstraints(1,2,1,1,
            0.0,0.0
            ,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(0,0,5,0),
            0,0));
        logConfigPanel.add(logFontSample,new GridBagConstraints(0,3,2,1,0.0,0.0
            ,GridBagConstraints.CENTER,GridBagConstraints.NONE,new Insets(0,0,5,
            0),0,0));
    logConfigPanel.add(labelFontFamily,  new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.EAST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
//        String[] fonts = getToolkit().getFontList();
        for(int i = 0;i < fonts.length;i++){
            config_logFontFamily.addItem(fonts[i]);
        }
//        String[] fontSizes = {"6","7","8","9","10","11","12","13","14","15",
//                             "16","17","18","19","20"};
        for(int i = 0;i < fontSizes.length;i++){
            config_logFontSize.addItem(fontSizes[i]);
        }

    searchConfigPanel.add(jPanel1,    new GridBagConstraints(0, 0, 1, 1, 1.0, 1.0
            ,GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0));
    jPanel1.add(config_useRegexp,   new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
            ,GridBagConstraints.SOUTHWEST, GridBagConstraints.NONE, new Insets(0, 0, 5, 0), 0, 0));
    jPanel1.add(config_ignoreCase,    new GridBagConstraints(0, 1, 1, 1, 0.0, 0.0
            ,GridBagConstraints.NORTHWEST, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
        searchConfigPanel.setLayout(gridBagLayout2);
        jTabbedPane1.add("*ConfigDialog.log*",logConfigPanel);
        jTabbedPane1.add("*ConfigDialog.search*",searchConfigPanel);
        jTabbedPane1.add("*ConfigDialog.threadDump*",dumpConfigPanel);
    }

    void cancelButton_actionPerformed(ActionEvent e){
        this.setVisible(false);
    }

    void okButton_actionPerformed(ActionEvent e){
        this.mainFrame.config.store(this);
        this.mainFrame.applyConfig();
        try{
            this.mainFrame.config.save();
        } catch(java.io.IOException ioe){
            this.mainFrame.setTemporaryStatus(ioe.getMessage());
        }
        this.setVisible(false);

    }

    void this_windowActivated(WindowEvent e){
        this.cancelButton.grabFocus();

    }

    void config_logFontSize_itemStateChanged(ItemEvent e){
        setLogSampleFont();
    }
    void config_dumpFontSize_itemStateChanged(ItemEvent e){
        setDumpSampleFont();
    }

    private void setLogSampleFont(){
        if( -1 != config_logFontSize.getSelectedIndex() &&
            -1 != config_logFontFamily.getSelectedIndex()){
            logFontSample.setFont(new Font((String)config_logFontFamily.
                getSelectedItem(),0,
                Integer.parseInt((String)config_logFontSize.getSelectedItem())));
        }
    }
    private void setDumpSampleFont(){
        if( -1 != config_dumpFontSize.getSelectedIndex() &&
            -1 != config_dumpFontFamily.getSelectedIndex()){
            dumpFontSample.setFont(new Font((String)config_dumpFontFamily.
                getSelectedItem(),0,
                Integer.parseInt((String)config_dumpFontSize.getSelectedItem())));
        }
    }

    void config_logFontFamily_itemStateChanged(ItemEvent e){
        setLogSampleFont();

    }

}

class ConfigDialog_cancelButton_actionAdapter implements java.awt.event.
    ActionListener{
    ConfigDialog adaptee;

    ConfigDialog_cancelButton_actionAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e){
        adaptee.cancelButton_actionPerformed(e);
    }
}

class ConfigDialog_okButton_actionAdapter implements java.awt.event.
    ActionListener{
    ConfigDialog adaptee;

    ConfigDialog_okButton_actionAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void actionPerformed(ActionEvent e){
        adaptee.okButton_actionPerformed(e);
    }
}

class ConfigDialog_this_windowAdapter extends java.awt.event.WindowAdapter{
    ConfigDialog adaptee;

    ConfigDialog_this_windowAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void windowActivated(WindowEvent e){
        adaptee.this_windowActivated(e);
    }
}

class ConfigDialog_config_logFontSize_itemAdapter implements java.awt.event.
    ItemListener{
    ConfigDialog adaptee;

    ConfigDialog_config_logFontSize_itemAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void itemStateChanged(ItemEvent e){
        adaptee.config_logFontSize_itemStateChanged(e);
    }
}

class ConfigDialog_config_dumpFontSize_itemAdapter implements java.awt.event.
    ItemListener{
    ConfigDialog adaptee;

    ConfigDialog_config_dumpFontSize_itemAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void itemStateChanged(ItemEvent e){
        adaptee.config_dumpFontSize_itemStateChanged(e);
    }
}

class ConfigDialog_config_dumpFontFamily_itemAdapter implements java.awt.event.
    ItemListener{
    ConfigDialog adaptee;

    ConfigDialog_config_dumpFontFamily_itemAdapter(ConfigDialog adaptee){
        this.adaptee = adaptee;
    }

    public void itemStateChanged(ItemEvent e){
        adaptee.config_dumpFontSize_itemStateChanged(e);
    }
}
