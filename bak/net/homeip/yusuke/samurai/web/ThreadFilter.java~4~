package net.homeip.yusuke.samurai.web;

import java.io.Serializable;
import java.io.UnsupportedEncodingException;

import net.homeip.yusuke.samurai.FullThreadDump;
import net.homeip.yusuke.samurai.SunThreadDump;
import net.homeip.yusuke.samurai.ThreadDump;
import net.homeip.yusuke.samurai.ThreadStatistic;

import java.util.List;
import java.util.ArrayList;
import java.net.URLDecoder;

public class ThreadFilter implements Serializable {
  private String mode;
  private int fullThreadIndex;
  private String threadName;
  private boolean debug = true;
  private boolean shrinkIdle;

  public ThreadFilter() {
    reset();
  }

  public void reset() {
    mode = Constants.MODE_ALL_THREADS;
    fullThreadIndex = 0;
    threadName = "";
    shrinkIdle = true;
  }

  public String getMode() {
    return this.mode;
  }

  public ThreadDump[] doFilter(ThreadStatistic statistic) {
    ThreadDump[] threadDumps;
    if (this.mode.equals(Constants.MODE_ALL_THREADS)) {
      FullThreadDump fullThreadDump = statistic.getFullThreadDump(this.
          fullThreadIndex);
      threadDumps = new ThreadDump[fullThreadDump.getThreadCount()];
      for (int i = 0; i < fullThreadDump.getThreadCount(); i++) {
        threadDumps[i] = fullThreadDump.getThreadDump(i);
      }
    } else {
      List threadList = new ArrayList();
      for (int i = 0; i < statistic.getFullThreadDumpCount(); i++) {
        FullThreadDump fullThreadDump = statistic.getFullThreadDump(i);
        for (int j = 0; j < fullThreadDump.getThreadCount(); j++) {
          ThreadDump threadDump = fullThreadDump.getThreadDump(j);
          if (threadDump.getName().equals(this.threadName)) {
            threadList.add(threadDump);
          }
        }
      }
      threadDumps = new ThreadDump[threadList.size()];
      for (int i = 0; i < threadDumps.length; i++) {
        threadDumps[i] = (ThreadDump) threadList.get(i);
      }
    }
    return threadDumps;
  }

  public int getFullThreadIndex() {
    return this.fullThreadIndex;
  }

  public void setFullThreadIndex(int index) {
    this.fullThreadIndex = index;
  }

  public String getThreadName() {
    return threadName;
  }

  public void setThreadName(String threadName) {
    this.threadName = threadName;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }

  public void setQuery(String query) {
    if (debug)
      System.out.println("query:" + query);
    String mode = getParameter(query,"mode");
    if(null != mode){
      setMode(mode);
    }
    if(getMode().equals(Constants.MODE_ALL_THREADS)){
      String fullThreadIndex = getParameter(query,Constants.FULL_THREAD_INDEX);
      try{
        if(null != fullThreadIndex){
          setFullThreadIndex(Integer.parseInt(fullThreadIndex));
        }
      }catch(NumberFormatException shouldNeverHappen){}
    }else{
      String threadName = getParameter(query,Constants.THREAD_NAME);
      if(null != threadName){
        setThreadName(threadName);
      }
    }

    String shrinkIdle = getParameter(query,Constants.SHRINK_IDLE);
    if(null != shrinkIdle){
      setShrinkIdle(Boolean.valueOf(shrinkIdle).booleanValue());
    }


    System.out.println("mode:"+mode);
    System.out.println("threadName:"+threadName);
    System.out.println("fullThreadIndex:"+fullThreadIndex);
    System.out.println("shrinkIdle:"+this.shrinkIdle);


  }
  private String getParameter(String query,String name) {
    int index = query.indexOf(name);
    if ( -1 == index) {
      return null;
    } else {
      int parambegin = query.indexOf("=", index) + 1;
      int paramend = query.indexOf("&", index);
      if(-1 != paramend){
      	try{
	        return URLDecoder.decode(query.substring(parambegin, paramend),"UTF-8");
      	}catch(UnsupportedEncodingException uee){
      		throw new AssertionError("UTF-8 must be supported.");
      	}
      }else{
      	try{
	        return URLDecoder.decode(query.substring(parambegin),"UTF-8");
      	}catch(UnsupportedEncodingException uee){
      		throw new AssertionError("UTF-8 must be supported.");
      	}
      }
    }
  }
  public boolean getShrinkIdle() {
    return shrinkIdle;
  }
  public void setShrinkIdle(boolean shrinkIdle) {
    this.shrinkIdle = shrinkIdle;
  }

}