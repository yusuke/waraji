package net.homeip.yusuke.samurai;

import java.util.List;
import java.io.Serializable;

public class StackLine implements Serializable{
  private String line;
  private List stateList;
  public StackLine(String line) {
    this.line = line;
  }

  public boolean isLine(){
    return this.line.startsWith("\tat");
  }
  public boolean isCondition(){
    return this.line.startsWith("\t-");
  }

  /*methods for condition*/

  public boolean isWaitingToLock(){
    return -1 != this.line.indexOf("waiting to lock");
  }
  public boolean isLocked(){
    return -1 != this.line.indexOf("locked");
  }
  public boolean isWaitingOn(){
    return -1 != this.line.indexOf("waiting on");
  }

  public String getTarget(){
    return this.line.substring(this.line.indexOf("<"));
  }

  public String getClassName() {
    int classIndexBegin = line.indexOf("at ") + 3;
    int classIndexEnd = line.lastIndexOf(".", line.indexOf("("));
    if(-1 != classIndexBegin){
        return line.substring(classIndexBegin, classIndexEnd);
    }else{
        return "n/a";
    }
  }

  public String getMethodName() {
    int methodIndexBegin = line.lastIndexOf(".", line.indexOf("(")) + 1;
    int methodIndexEnd = line.indexOf("(");
    return line.substring(methodIndexBegin, methodIndexEnd);
  }

  public String getSource() {
    if (isNativeMethod()) {
      return "Native Method";
    } else {
      int sourceIndexBegin = line.indexOf("(") + 1;
      int sourceIndexEnd = line.indexOf(":");
      return line.substring(sourceIndexBegin, sourceIndexEnd);
    }
  }

  public String getLine() {
    if (isNativeMethod()) {
      return "Native Method";
    } else {
      int lineIndexBegin = line.indexOf(":") + 1;
      int lineIndexEnd = line.indexOf(")");
      return line.substring(lineIndexBegin, lineIndexEnd);
    }
  }

  public boolean isNativeMethod() {
    return -1 != line.indexOf("Native Method");
  }

  public String toString() {
      return line;
  }

}